{"version":3,"sources":["Header.js","Action.js","Option.js","Options.js","AddOption.js","OptionModal.js","Indecision.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","title","subtitle","Action","onClick","handlePick","disabled","hasOptions","Option","count","optionList","e","deleteSingleOption","Options","deleteOptions","options","length","map","option","index","src_Option","key","AddOption","state","error","undefined","addingOption","preventDefault","target","elements","value","trim","_this","setState","this","onSubmit","type","name","Component","OptionModal","lib_default","isOpen","selectedOptions","onRequestClose","clearSelectedOption","contentLabel","closeTimeoutMS","Indecision","optionToRemove","prevState","filter","randomNum","Math","floor","random","indexOf","concat","json","localStorage","getItem","JSON","parse","prevProps","stringify","setItem","console","log","src_Header","src_Action","src_Options","src_AddOption","src_OptionModal","Boolean","window","location","hostname","match","ReactDOM","render","src_Indecision","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7ee7d56e.chunk.js","sourcesContent":["import React from 'react';\nimport './styles/header.scss'\n\nconst Header = (props) =>{\n     return(\n      <div className=\"header\">\n          <div className=\"container\">\n            <h1 className=\"header_title\">{props.title}</h1>\n            <h2 className=\"header_subtitle\">{props.subtitle}</h2>\n          </div>\n      </div>\n   )\n}\n\nexport default Header;\n","import React from 'react';\n\nconst Action = (props) => {\n \n  return (\n    <div>\n      <button\n        className=\"big-button\" \n        onClick={props.handlePick}\n        disabled={!props.hasOptions}\n      >\n        What should I do?\n      </button>\n    </div>\n  );  \n}\n\nexport default Action;","import React from 'react';\n\nconst Option = (props) => {\n\treturn(\n\t\t<div className=\"single-option\">\n\t\t\t<p className=\"option-font\">{props.count}. {props.optionList}</p>\n\t\t\t<button\n\t\t\t\tclassName=\"button-remove\" \n\t\t\t\tonClick={(e) => {\n\t\t\t\t\tprops.deleteSingleOption(props.optionList);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tremove\n\t\t\t</button>\n\t\t</div>\n\t)\n}\nexport default Option;","import React from 'react';\nimport Option from './Option';\n\nconst Options = (props) => {\n  \n    return (\n      <div>\n        <div className=\"header-options\">\n          <h3 className=\"options-title\">Your options</h3>\n          <button\n            className=\"button-remove-all\" \n            onClick={props.deleteOptions}\n            >Remove All\n          </button>\n        </div>\n        {\n          //when not option was entered dispaly the <p> paragraph.\n          props.options.length === 0 && <p className=\"option-message\">Please add an option to get started</p>\n        }\n        {\n          props.options.map((option, index) => (\n            <Option \n              key={option} \n              optionList={option}\n              count={index + 1}\n              deleteSingleOption = {props.deleteSingleOption}\n            />\n          ))\n        }\n      </div>\n    );\n}\nexport default Options;","import React, { Component } from 'react';\n\nclass AddOption extends Component {\n\tstate = {\n\t\terror: undefined //tracking an error, by default no error is undefined\n\t}\n\t// this function was defined inside AddOption rather than in the Indecision componnent\n\t// the parent component, cause this below function is a behavior/methods that belongs to AddOption component\n\t\n\taddingOption = (e) => { // grabbing the event \"e\"\n\t\te.preventDefault(); // preventing the default submission form\n\n\t\tconst option = e.target.elements.option.value.trim(); // grabbing the input element value property\n\t\tconst error = this.props.addingOption(option); // if an error comes \n\t\t\n\t\t// updating the error state when they submit a form with an error\n\t\tthis.setState(()=>({error})); //error: error\n\n\t\t//clearing the inputbox after enter an option;\n\t\tif(!error){\n\t\t\te.target.elements.option.value='';\n\t\t}\n\t}\n\n\t// \"  Alain   \"  trim() - removing the empty spaces/characters before and after the string\n\n  render() {\n    return (\n\t\t\t//if an error is submited so display on the screen\n      <div>\n\t\t\t\t{this.state.error && <p className=\"add-option-error\">{this.state.error}</p>}\n\t\t\t\t<form className=\"add-option\" onSubmit={this.addingOption}>\n\t\t\t\t\t<input className=\"add-option-input\" type=\"text\" name=\"option\"></input>\n\t\t\t\t\t<button className=\"button\">AddOption</button>\n\t\t\t\t</form>\n      </div>\n    );\n  }\n}\n\nexport default AddOption;","import React from 'react';\nimport Modal from 'react-modal';\nimport './styles/modal.scss'\n\n//creating a modal that hides and shows based on a value.\nconst OptionModal = (props) => {\n    return(\n        <Modal\n            isOpen={!!props.selectedOptions} //real boolean\n            onRequestClose={props.clearSelectedOption}\n            contentLabel=\"Selected option\"\n            closeTimeoutMS={200}\n            className=\"modal\"\n        >\n            <h3 className=\"modal-title\">Selected Option</h3>\n            {props.selectedOptions &&<p className=\"modal-boday\">{props.selectedOptions}</p>}\n            <button className=\"button\" onClick={props.clearSelectedOption}>okay</button>\n       </Modal>\n    )\n}\n\nexport default OptionModal;","import React, {Component} from 'react';\nimport Header from './Header';\nimport Action from './Action';\nimport Options from './Options';\nimport AddOption from './AddOption';\nimport OptionModal from './OptionModal';\n\n\nclass Indecision extends Component{\n state = {\n   options: [],\n   selectedOptions: undefined\n };\n\n  //returning an empty array.\n  deleteOptions = ()=>{\n    this.setState(() => ({options: [] }));\n  }\n\n  clearSelectedOption = () =>{\n    this.setState(()=>({selectedOptions: undefined})) \n  }\n\n  //creating a method that is going to be responsible for taking in an option (the one we wanna delete \"in the args\")\n  //and using setSate to actuatly remove it\n    deleteSingleOption = (optionToRemove) => {\n    this.setState((prevState)=>({\n      options: prevState.options.filter((option)=> optionToRemove !== option)\n        //return true -> if we wanna keep this option in the array\n        //return false // -> if we don't wanna this option in the array\n        //return if optionToRemove is different than actual option \n    }));\n  }\n\n  handlePick = () => {\n    //picking a handle number to be alerted with the random function\n    const randomNum = Math.floor(Math.random()*this.state.options.length);\n    const option = this.state.options[randomNum];\n   this.setState(()=>({\n     selectedOptions: option\n   }));\n  }\n\n  addingOption = (option) => {\n    if(!option){ //if an empty string was put\n      return 'Enter a valid value to add item';\n    }\n  else if(this.state.options.indexOf(option) > -1){// if the option already exists in the array\n    return 'This option already exists';\n  }\n    //pushing the new option in the array using concat()\n    this.setState((prevState => ({options: prevState.options.concat(option)})));\n  }\n  componentDidMount(){\n    \n    try{\n      const json = localStorage.getItem('options');\n      const options = JSON.parse(json);\n\n      //if options were entered\n      if(options){\n        this.setState(() => ({options}));\n      }\n\n    //catching if a bad data was entered, such as: JSON.parse('[12}') using try ... catch\n    //trying some code and catching if there're errors\n\n    }catch(e){\n      // Do nothinh at all\n    }\n  }\n  componentDidUpdate(prevProps, prevState){\n    if(prevState.options.length !== this.state.options.length){\n    const json = JSON.stringify(this.state.options);\n    localStorage.setItem('options',json);\n    }\n  }\n  componentWillUnmount(){\n    console.log('componentWillUnmount');\n  }\n\n\n  render(){\n    const title = 'Indecision';\n    const subtitle = 'Put your life in the hands of computer';\n    //const options = ['Thing one', 'Thing two', 'Thing three'];\n\n    return(\n      <div>\n        <Header title={title} subtitle={subtitle}/>\n        <div className=\"container\">\n            <Action \n              handlePick={this.handlePick} \n              hasOptions={this.state.options.length > 0}\n            />\n          <div className=\"options-container\">\n            <Options \n              options={this.state.options}\n              deleteOptions={this.deleteOptions}\n              deleteSingleOption={this.deleteSingleOption}\n            />\n            <AddOption addingOption={this.addingOption}/>\n          </div>\n        </div>\n\n        <OptionModal\n          selectedOptions={this.state.selectedOptions}\n          clearSelectedOption={this.clearSelectedOption}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Indecision;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Indecision from './Indecision'\nimport * as serviceWorker from './serviceWorker';\nimport './styles/styles.scss';\nimport './styles/normalize.css';\n\n\nReactDOM.render(<Indecision/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}